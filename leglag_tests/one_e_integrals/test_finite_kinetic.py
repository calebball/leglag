"""
Tests that the potential energy integrals are correctly evaluated for finite
domains.
"""
import numpy as np
import pytest
from hypothesis import given, strategies as st

from leglag.one_d_domain import FinDomain
from leglag.one_e_integrals import fin_kinetic


@given(
    functions=st.integers(min_value=1, max_value=50),
)
def test_kinetic_matrix_shape(functions):
    """Tests that the shape of the kinetic energy integral matrix is correct."""
    domain = FinDomain(0, 0, 1, 1, functions, None)
    matrix = fin_kinetic(domain)
    assert matrix.shape == (functions, functions)


unscaled_kinetic_matrix = 0.25 * np.array(
    [
        [5, 0, np.sqrt(3), 0, np.sqrt(13 / 14)],
        [0, 21, 0, 3 * np.sqrt(11), 0],
        [np.sqrt(3), 0, 51, 0, 17 * np.sqrt(39 / 14)],
        [0, 3 + np.sqrt(11), 0, 99, 0],
        [np.sqrt(13 / 14), 0, 17 * np.sqrt(39 / 14), 0, 169],
    ]
)


@given(
    width=st.floats(min_value=np.finfo(np.float64).min ** 2)
)
def test_kinetic_matrix_values(width):
    """Tests that the kinetic matrix is correctly generated by comparing to an
    analytically constructed example.

    The width of the domain must be at least the square of the smallest
    non-zero representable by a double, otherwise we get a divide by zero.
    """
    domain = FinDomain(0, 0, 2 * width, 1, 5, None)
    matrix = fin_kinetic(domain)
    assert np.isclose(
        matrix, unscaled_kinetic_matrix / width ** 2, atol=0, rtol=1e-14
    ).all()
